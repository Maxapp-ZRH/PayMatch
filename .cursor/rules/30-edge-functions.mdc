---
description: Edge Functions — serverless Deno functions for webhooks, custom APIs, and privileged operations
globs:
  - 'supabase/functions/**'
  - 'src/**/*.ts'
  - 'src/**/*.tsx'
alwaysApply: true
---

# Edge Functions

## Overview

Edge Functions are serverless functions that run on Deno and handle webhooks, custom APIs, and privileged database operations.

## When to Use

- **Webhooks**: Stripe payments, external service integrations
- **Custom APIs**: Complex business logic beyond simple SQL queries
- **Privileged Operations**: Cross-tenant operations, admin tasks
- **Cron Jobs**: Scheduled tasks, data cleanup, notifications
- **External Integrations**: Email services, payment gateways, third-party APIs

## When NOT to Use

- **Simple CRUD operations** - Use RLS policies and direct Supabase queries instead
- **User authentication** - Use Supabase Auth directly
- **File uploads** - Use Supabase Storage directly
- **Real-time subscriptions** - Use Supabase Realtime directly
- **Basic database queries** - Use generated types with Supabase client directly

## Architecture

- **Location**: `supabase/functions/`
- **Runtime**: Deno (not Node.js)
- **Language**: TypeScript/JavaScript
- **Deployment**: Automatic via GitHub Actions, manual via CLI

## Security Rules

- **ALWAYS** use service role key for privileged database access
- **NEVER** expose service role key to client-side code
- **ALWAYS** validate input parameters
- **ALWAYS** include proper CORS headers
- **ALWAYS** handle errors gracefully with proper HTTP status codes
- **ALWAYS** use RLS policies as primary security layer

## Development Workflow

```bash
# Start local development
supabase start

# Serve functions locally
npm run functions:serve

# Deploy specific function
supabase functions deploy <function-name>

# Deploy all functions
npm run functions:deploy

# Deploy to production
npm run functions:deploy:all
```

## Function Structure

```
supabase/functions/
├── <function-name>/
│   └── index.ts          # Main function code
└── README.md             # Documentation
```

## Code Standards

```typescript
// ✅ CORRECT - Proper Edge Function structure
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers':
    'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    // Initialize Supabase client with service role key
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    // Your function logic here
    const result = await processRequest(req, supabaseClient);

    return new Response(JSON.stringify(result), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 200,
    });
  } catch (error) {
    console.error('Function error:', error);
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      status: 400,
    });
  }
});
```

## Environment Variables

```bash
# Required for all functions
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_SERVICE_ROLE_KEY=your-service-role-key

# Function-specific variables
STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret
RESEND_API_KEY=your_resend_key
```

## Testing

```bash
# Test locally
curl -H "Authorization: Bearer YOUR_ANON_KEY" \
  http://127.0.0.1:54321/functions/v1/<function-name>

# Test production
curl https://your-project.functions.supabase.co/<function-name>
```

## Common Patterns

- **Webhook Handlers**: Verify signatures, process events, update database
- **Notification Services**: Send emails, SMS, push notifications
- **Data Processing**: Transform data, run calculations, generate reports
- **Integration Bridges**: Connect external services to your database

## Error Handling

- **ALWAYS** catch and log errors
- **ALWAYS** return appropriate HTTP status codes
- **ALWAYS** provide meaningful error messages
- **NEVER** expose internal errors to clients

## Performance

- **Keep functions lightweight** - they have execution time limits
- **Use connection pooling** for database operations
- **Cache frequently accessed data** when possible
- **Handle timeouts gracefully**

## Monitoring

- **Log all function executions**
- **Monitor error rates and response times**
- **Set up alerts for function failures**
- **Track function usage and costs**
